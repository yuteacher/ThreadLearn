5.4.3 工作原理
	当程序运行时，与上节一样运行了两个异步操作。然而这次从AsynchronyWithAwait方法讲起。它看起来仍然像平常的同步代码，唯一不同之处是使用了两个await声明。最重要的一点是该代码依然是顺序执
行的，Async2任务只有等之前的任务完成后才会开始执行。当阅读该代码时，程序流很清晰，可以看到什么先运行，什么后运行。但该程序如何是异步程序呢?首先，它不总是异步的。当使用await时如果一
个任务已经完成，我们会异步地得到该任务结果。否则，当在代码中看到await声明时，通常的行为是方法执行到该 await 代码行时将立即返回，并且剩下的代码将会在一个后续操作任务中运行。因此等待
操作结果时并没有阻塞程序执行，这是一个异步调用。当AsynchronyWithAwait方法中的代码在执行时，除了在 Main方法中调用t.Wait外，我们可以执行任何其他任务。然而主线程必须等待直到所有异步操
作完成，否则主线程完成后所有运行异步操作的后台线程会停止运行。
	AsynchronyWithTPL方法模仿了AsynchronyWithAwait的程序流。我们需要一个容器任务来处理所有相互依赖的任务。然后启动主任务，给其加了一组后续操作。当该任务完成后，会打印出其结果。然后
又启动了一个任务，在该任务完成后会依次运行更多的后续操作。为了测试对异常的处理，当运行第二个任务时故意抛出一个异常，并打印出异常信息。这组后续操作创建了与第一个方法中一样的程序流。
如果用它与await方法比较，可以看到它更容易阅读和理解。唯一的技巧是请记住异步并不总是意味着并行执行。