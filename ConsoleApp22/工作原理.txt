2.4.3 工作原理
	当主程序启动时，创建了SemaphoreSlim的一个实例，并在其构造函数中指定允许的并发线程数量。然后启动了6个不同名称和不同初始运行时间的线程。
	每个线程都尝试获取数据库的访问，但是我们借助于信号系统限制了访问数据库的并发数为4个线程。当有4个线程获取了数据库的访问后，其他两个线程需要等待，直到之前线程中的某一个完成工作并调用
semaphore.Release 方法来发出信号。
	这里我们使用了混合模式，其允许我们在等待时间很短的情况下无需使用上下文切换。然而，有一个叫作Semaphore的SemaphoreSlim类的老版本。该版本使用纯粹的内核时间(kerel-time)方式。一般没必要使用它，
除非是非常重要的场景。我们可以创建一个具名的semaphore，就像一个具名的mutex 一样，从而在不同的程序中同步线程。SemaphoreSlim 并不使用 Windows内核信号量，而且也不支持进程间同步。所以在跨程序同步
的场景下可以使用Semaphore.