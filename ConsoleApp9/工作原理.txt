8.5 工作原理
	这里我们展示了创建可观察的对象的不同场景。大部分的功能是通过Observable类型的静态工厂方法实现的前两个例子展示了如何使用值或者不使用值来创建一个Observable方法。接下来的例子中使用ObservabIe.Throw来构造
一个Observable类，从而触发其观察者的OnError处理器。
	Observable.Repeat方法代表了一个无尽的序列。该方法有多个重载这里我们通过重复值42构造了一个无尽的序列。然后使用LINQ的Take方法从该序列中提取5个元素Observable.Range表示了一组值，其与Enumerable.Range非常类似。
	Observable℃reate方法支持更多的自定义场景。有相当多的重载允许我们使用取消标志和任务但我们先看看最简单的重载。它接受一个函数，该函数接受一个观察者实例，并且返回1Disposable对象来代表订阅者。如果需要清除任
何资源，可以在此放置清除逻辑，但本例中只返回一个空的drsposable，因为实际上并不需要.
	0bservable.Generate是另一个创建自定义序列的方式。我们必须为序列提供一个初始值，然后提供一个断言，来决定是否需要生成更多元素或者完成序列。接着提供了一个迭代逻辑，在本例中递增计数器值。最后一个参数是一个选
择器函数，允许我们定制化结果。
	最后两个方法处理计时器Observable.1nterval会以TimeSpan间隔产生计时器标记事件，Observable.Timer也指定了启动时间