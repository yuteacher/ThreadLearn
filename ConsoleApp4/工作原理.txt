7.6 工作原理
	为了演示我们能够为PLINQ查询选择自定义的分区策略，我们创建了一个非常简单的分区器，用于并行地处理奇数长度与偶数长度的字符串。为了实现这个区
分器，我们从Partitioner<T>标准基类派生出StringPartitioner类来，并使用string作为类型参数我们声明只支持静态分区，方式是重载SupportsDynamicParutions
属性并设置其值为false这意味着我们预定义了分区策略这是一个简易方法来对初始集合进行分区，但是有可能效率较低，主要取决于集合中是什么样的数据例如，
在本例中有很多奇数长度的字符串，但只有一个字符串是偶数长度，其中一个线程会早早的完成而不会帮助处理奇数长度的字符串。而动态分区意味着我们实时对
初始集合进行分区，并在工作线程间平衡工作负载然后我们实现了GetPartitions方法，在其中定义了两个迭代第一个从源集合中返回奇数长度的字符串，第二个则
返回偶数长度的字符串。最后，创建了一个分区器的实例并使用它来执行一个PLINQ查询。我们可以看到不同的线程会处理奇数长度和偶数长度的字符串