3.3 工作原理
	首先定义了 AsyncOperation方法，其接受单个object类型的参数。然后使用QucueUscr-Workltem 方法将该方法放到线程池中。接着再次放人该方法，但是这次给方法调用传人了一个状态对象。该对象将作为状态参数传递给AsynchronousOperation方法。
在操作完成后让线程睡眠一秒钟，从而让线程池拥有为新操作重用线程的可能性。如果注释掉所有的 Thread.Sleep调用，那么所有打印出的线程ID 多半是不一样的。如果ID 是一样的，那很可能是前两个线程被重用来运行接下来的两个操作。
	首先将一个1ambda表达式放置到线程池中。这里没什么特别的。我们使用了labmbda表达式语法，从而无须定义一个单独的方法。
然后，我们使用闭包机制，从而无须传递1lambda表达式的状态。闭包更灵活，允许我们向异步操作传递一个以上的对象而且这些对象具有静态类型。所以之前介绍的传递对象给方法回调的机制既几余又过时。在C#中有了闭包后就不再需要使用它了