4.5工作原理
	这里定义了两种委托。其中一个使用了out参数，因此在将APM 模式转换为任务与标准的 TPLAPI是不兼容的。这样的转换有三个示例。
	将 APM 转换为 TPL,的关键点是 Task<T>.Factory.FromAsync 方法，T是异步操作结果的类型。该方法有数个重载。
	在第一个例子中传人了IAsyncResult和Func<IAsyncResult，string>这是一个将IAsyncResult 的实现作为参数并返回一个字符串的方法。
由于第一个委托类型提供的 EndMethod与该签名是兼容的，所以将该委托的异步调用转换为任务没有任何问题。
	第二个例子做的事与第一个非常相似，但是使用了不同的FromAsync方法重载，该重载并不允许指定一个将会在异步委托调用完成后被调用的回调函数。
但我们可以使用后续操作替代它。但如果回调函数很重要，可以使用第一个例子所示的方法。
	最后一个例子展示了一个小技巧。这次IncompatibleAsynchronousTask委托的EndMethod使用了out参数，与FromAsync方法重载并不兼容。
然而，可以很容易地将EndMethod 调用封装到一个 1ambda 表达式中，从而适合任务工厂方法。可以在等待异步操作结果过程中打印出任务状态，从而了解底层任务的运行情况。
可以看到第一个任务的状态为 WaitingForActivation，这意味着TPL基础设施实际上还未启动该任务。