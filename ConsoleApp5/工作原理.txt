7.7 工作原理
	这里我们实现了一个可以工作于 PLINQ 查询的自定义聚合机制。我们需要知道由于一个查询会被多个任务同时以并行的方式处理，那么就需要提供一种机制来并行地聚合每个任务的结果，然后将这些聚合的值合并到单个
结果值中。
	本节中，我们编写了一个聚合函数用来在PLINQ查询中统计字母数量，其返回一个IEnumerable<string>集合。它统计了每个集合项中的所有字母数。为了演示并行聚合过程我们打印出了具体线程处理该聚合器的所
有部分的信息。
	我们使用了定义在 ParallelEnumerable类中的Aggregate扩展方法来聚合PLINQ查询结果。它接受4个参数，每个都是一个函数用于执行该聚合过程的不同部分。第一个是一个工厂类，其构造了该聚合器的空的
初始值。该值也被称为种子值。请注意提供给Aggregate方法的第一个值并不是聚合器功能的初始种子值，而是一个构造了该初始种子值的工厂方法。如果你只提供一个实例，其将被使用在并行运行的所有分区中，这将导致不
正确的结果。
	第二个函数将每个集合项聚合到分区聚合对象中。我们使用AccumulateLettersInformation方法来实现该函数。它迭代字符串并统计其中的字符数。这里的聚合对象在并行运行的每个查询分区中是不一样的，这就是为什
么我称其为taskTotal。
	第三个函数是一个高阶聚合函数，用于从分区中将一个聚合对象合并到全局聚合对象中。我们使用 MergeAccumulators方法来实现它。最后一个函数是一个选择器函数，指定了全局聚合对象中我们需要的确切数据。
	最后，我们打印出了聚合器值，并按照在集合项中字符使用频率从高到低排序。