10.3.3 工作原理
	前面的示例中，我们实现了最常见的异步编程场景的其中之一。假设我们有一些数据需要经历数个计算阶段，并且这些计算要花费大量时间。后者计算需要使用前者的结果，所以不能并行运行它们。	
	如果只有一个项要处理，则可能很难改进性能。然而，如果许多项要经历相同的计算阶段，我们可以使用并行管道技术。这意味着我们不用等待所有项通过第一个计算阶段，然后才进行第二个。其实只需一个
项完成计算阶段后，就可以将其移动到下一个阶段，同时接下来的项可以被之前的阶段处理，依次类推。结果，通过移动第一个项在第一个计算阶段的时间来实现一个几乎是并行的处理过程。
	这里，我们为每个处理阶段使用了4个集合，这说明了我们也可以以并行的方式处理每个阶段。我们做的第一步是提供了按下C键来取消整个过程的功能。我们创建了一个取消标志，并运行一个单独的任务来监
视C键。然后我们自定义了管道。它由三个主要的阶段组成。第一个阶段是将初始值放人到前四个集合中，其将被作为源数据被下一个阶段使用。该代码在 Parallel.For 循环中，而该循环在 Parallel.Invoke声明
中。由于我们以并行的方式运行所有阶段，所以这初始化阶段也是以并行的方式运行。
	接下来的阶段是定义管道元素。该逻辑定义在PipelineWorker 类中。我们使用输入集合初始化了工作者，提供了一个转换函数，然后和其他的工作者一起并行运行。这里我们定义了两个工作者，也可以称为过
滤器，因为它们过滤了初始序列。其中一个将整数转换为小数，第二个将小数转换为字符串。最后一个工作者只将每个传入的字符串打印到控制台。每个地方都提供了运行的线程ID，来揭示整个程序是如何工作的。
此外，我们添加了人为的延迟，所以每项的处理更加自然，就像我们真的需要大计算量一样。
	结果我们得到了实际的期望行为。首先，一些项被创建在初始集合中。接下来，第一个过滤器可以处理它们，待处理完毕后，第二个处理器也开始工作，最终该项被传给最后一个工作者并将其打印到控制台。