9.2工作原理
	当程序运行时，我们以不同的方式创建了4个文件，并且填充了随机数据。在第一个例子中，使用的是 FileStream 类以及其方法，将异步编程模型 API转换成任务。第二个例子中也一样，但是给FileStream构造函数提供了
FileStream.Asynchronous 参数。
	使用 FileOptions.Asynchronous选项是非常重要的。如果忽略该选项，我们依然可以以异步的方式使用该文件，但这只是在线程池中的异步委托调用。只有提供了该选项(或者在另一个构造函数重载中使用booluseAsync)，才能对
FileStream类使用异步 I/0。
	第三个例子使用了一些简化的API，比如File.Create方法和 StreamWrite类。它也使用I/O线程，我们可以使用 Stream.IsAsync属性来检查。最后一个例子说明了过分简化也不好。这里我们借助于异步委托调用来模拟异步 I/O，其
实并没有使用异步 IO。接着并行地异步地从所有文件中读取数据，统计每个文件内容，然后求总和。最后，删除所有文件。由于在任何非 Windows商店应用程序中并没有异步删除文件的API，我们使用Task.Run 工厂方法来模拟异步删
除文件。