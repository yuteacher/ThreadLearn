2.2.3 工作原理
	当程序运行时，会创建三个线程来运行TestCounter方法中的代码。该方法对一个对象按序执行了递增或递减操作。起初的Counter 对象不是线程安全的，我们会遇到竞争条件。所以第一个例子中计数器的结果值是不
确定的。我们可能会得到数字0。然而如果运行程序多次，你将最终得到一些不正确的非零结果。在第1章中，我们通过锁定对象解决了这个问题。在一个线程获取旧的计数器值并计算后赋予新的值之前，其他线程都被阻
塞了。然而，如果我们采用上述方式执行该操作,中途不能停止。而借助于Interlocked类，我们无需锁定任何对象即可获取到正确的结果。Interlocked 提供了 Increment、Decrement 和 Add 等基本数学操作的原子方法
，从而帮助我们在编写 Counter 类时无需使用锁。